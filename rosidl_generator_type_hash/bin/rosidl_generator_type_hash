#!/usr/bin/env python3

import argparse
import os
import sys

try:
    from rosidl_generator_type_hash import generate_type_hash
except ImportError:
    # modifying sys.path and importing the Python package with the same
    # name as this script does not work on Windows
    rosidl_generator_type_hash_root = os.path.dirname(os.path.dirname(__file__))
    rosidl_generator_type_hash_module = os.path.join(
        rosidl_generator_type_hash_root, 'rosidl_generator_type_hash', '__init__.py')
    if not os.path.exists(rosidl_generator_type_hash_module):
        raise
    from importlib.machinery import SourceFileLoader

    loader = SourceFileLoader('rosidl_generator_type_hash', rosidl_generator_type_hash_module)
    rosidl_generator_type_hash = loader.load_module()
    generate_type_hash = rosidl_generator_type_hash.generate_type_hash


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(
        description='Generate hashable representations and hashes of ROS interfaces.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '--package-name', required=True, help='TODO(emersonknapp')
    parser.add_argument(
        '--output-dir', required=True, help='TODO(emersonknapp')
    parser.add_argument(
        '--idl-tuples', nargs='+', required=True, help='TODO(emersonknapp)')
    parser.add_argument(
        '--include-paths', nargs='*', required=False, help='TODO(emersonknapp)')

    args = parser.parse_args(argv)

    generate_type_hash(
        package_name=args.package_name,
        output_dir=args.output_dir,
        idl_tuples=args.idl_tuples,
        include_paths=args.include_paths)


if __name__ == '__main__':
    sys.exit(main())
